# -*- coding: utf-8 -*-
"""PyLists.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D6dG6of4IC9Ts2AUOQRDaqX4Lgod5FKh
"""

mylist = ["apple", "banana", "cherry"]
print(mylist)

thislist = ["apple", "banana", "cherry", "apple", "cherry"]  # Lists can have duplicate items

print(f'Lists can have duplicate items \n{thislist}\n and the length of the list is {len(thislist)}')

list1 = ["abc", 34, True, 40, "male"]

print(list1)

print(type(list1))

thislist = list(("apple", "banana", "cherry")) # note the double round-brackets
print(thislist)

"""# **Access Items**"""

thislist = ["apple", "banana", "cherry"]
print(thislist[1])
print(thislist[-1])

# Range of Indexes

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "melon", "mango"]

print(thislist[2:5])
print(thislist[:4])
print(thislist[2:])
print(thislist[-4:-1])


print(thislist[::2])

thislist = ["apple", "banana", "cherry"]
if "apple" in thislist:
  print("Yes, 'apple' is in the fruits list")

"""**Change List Items**"""

thislist = ["apple", "banana", "cherry"]
print(thislist)

thislist[1] = "blackcurrant"
print(thislist)

thislist = ["apple", "banana", "cherry", "orange", "kiwi", "mango"]
print(thislist)

thislist[1:3] = ["blackcurrant", "watermelon"]
print(thislist)

thislist = ["apple", "banana", "cherry"]
thislist[1:2] = ["blackcurrant", "watermelon"]
print(thislist)

# If you insert less items than you replace,
# the new items will be inserted where you specified,
# and the remaining items will move accordingly:

thislist = ["apple", "banana", "cherry"]
thislist[1:3] = ["watermelon"]
print(thislist)

"""# **Add List Items**"""

thislist = ["apple", "banana", "cherry"]
thislist.append("orange")
print(thislist)

thislist = ["apple", "banana", "cherry"]
thislist.insert(1, "orange")
print(thislist)

thislist = ["apple", "banana", "cherry"]
tropical = ["mango", "pineapple", "papaya"]

# To append elements from another list to the current list, use the extend() method.

thislist.extend(tropical)
print(thislist)

thislist = ["apple", "banana", "cherry"]
thistuple = ("kiwi", "orange")

# The extend() method does not have to append lists,
# you can add any iterable object (tuples, sets, dictionaries etc.).

thislist.extend(thistuple)
print(thislist)

"""# **Remove List Items**"""

thislist = ["apple", "banana", "cherry"]
thislist.remove("banana")
print(thislist)

thislist = ["apple", "banana", "cherry"]
thislist.pop(1)
print(thislist)

# If you do not specify the index, the pop() method removes the last item.

thislist = ["apple", "banana", "cherry"]
thislist.pop()
print(thislist)

# The del keyword also removes the specified index:

thislist = ["apple", "banana", "cherry"]
del thislist[0]
print(thislist)

# The del keyword can also delete the list completely.

del thislist

print(thislist)

# the clear() method empties the list.
# the list still remains, but is has no content.

thislist = ["apple", "banana", "cherry"]
thislist.clear()
print(thislist)

thislist = ["apple", "banana", "cherry"]

myit = iter(thislist)
print(next(myit))
print(next(myit))
print(next(myit))

for x in thislist:
  print(x)

for i in range(len(thislist)):
  print(f'Item at Index {i}: {thislist[i]}')

thislist = ["apple", "banana", "cherry"]
i = 0
while i < len(thislist):
  print(thislist[i])
  i = i + 1

# Looping Using List Comprehension
# List Comprehension offers the shortest syntax for looping through lists:

thislist = ["apple", "banana", "cherry"]
[print(x) for x in thislist]

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]

newlist = [x for x in fruits]

print(newlist)

[print(x) for x in fruits]

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = []

'''Based on a list of fruits,
you want a new list,
containing only the fruits with the letter "a" in the name.'''

for x in fruits:
  if "a" in x:
    newlist.append(x)

print(newlist)

# newlist = [expression for item in iterable if condition == True]

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]

newlist2 = [x for x in fruits if "a" in x]
newlist3 = [x for x in fruits if "a" not in x]

print(newlist2)
print(newlist3)

# The condition is like a filter
# that only accepts the items that valuate to True.

newlist4 = [x for x in fruits if x != "apple"]

print(newlist4)

# The iterable can be any iterable object, like a list, tuple, set etc.

newlist9 = [x for x in range(10)]
print(newlist9)

# Same example, but with a condition:

newlist10 = [x for x in range(10) if x < 5]
print(newlist10)

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]

newlist11 = [x.upper() for x in fruits]

print(newlist11)

# You can set the outcome to whatever you like:
fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
newlist = ['hello' for x in fruits]
print(newlist)

fruits = ["apple", "banana", "cherry", "kiwi", "mango"]
# The expression can also contain conditions, not like a filter, but as a way to manipulate the outcome:
newlist = [x if x != "banana" else "orange" for x in fruits]
# Return "orange" instead of "banana":
print(newlist)

"Return the item if it is not banana, if it is banana return orange"

"""# **Sort Lists**

**Sort List Alphanumerically**

List objects have a sort() method that will sort the list alphanumerically, ascending, by default:
"""

thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort()

print(f'Sort the list alphabetically:\n{thislist}')

thislist = ["orange", "mango", "kiwi", "pineapple", "banana"]
thislist.sort(reverse=True)

print(f'Sort the list alphabetically \n in descending order:\n{thislist}')

thislist = [100, 50, 65, 82, 23]
thislist.sort()

print(f'Sort the list numerically:\n{thislist}')

thislist = [100, 50, 65, 82, 23]
thislist.sort(reverse=True)

print(f'Sort the list numerically \n in descending order:\n{thislist}')

"""**Customize Sort Function**"""

# Sort the list based on how close the number is to 50:

def myfunc(n):
  return abs(n - 50)

thislist = [100, 50, 65, 82, 23]
thislist.sort(key = myfunc)
print(thislist)

"""# **Case Insensitive Sort**

By default the sort() method is case sensitive, resulting in all capital letters being sorted before lower case letters:



"""

# Case Insensitive Sort

thislist = ["banana", "Orange", "Kiwi", "cherry"]


thislist.sort()  # Case sensitive sorting can give an unexpected result:
print(thislist)

 
thislist.sort(key = str.lower)  # Perform a case-insensitive sort of the list:
print(thislist)

thislist = ["banana", "Orange", "Kiwi", "cherry"]
print(thislist)

print('\n')

thislist.reverse()
print(thislist)

"""# **Copy Lists**"""

# Make a copy of a list with the copy() method:

thislist = ["apple", "banana", "cherry"]
mylist = thislist.copy()
print(mylist)


# Another way to make a copy is to use the built-in method list().

mylist1 = list(thislist)
print(mylist1)

"""# **Python - Join Lists**"""

list1 = ["a", "b", "c"]
list2 = [1, 2, 3]

list3 = list1 + list2
print(list3)

# Append list2 into list1
list1 = ["a", "b" , "c"]
list2 = [1, 2, 3]


for x in list2:
  list1.append(x)

print(list1)

# Use the extend() method to add list2 at the end of list1:
list1 = ["a", "b" , "c"]
list2 = [1, 2, 3]


list1.extend(list2)
print(list1)